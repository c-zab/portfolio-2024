---
import { getTranslation, getLocaleFromPath } from "../utils/i18n";

const locale = getLocaleFromPath(Astro.url.pathname);
const t = (key: string) => getTranslation(locale, key);
---

<div class="space-y-16">
  <!-- Main heading -->
  <div class="text-center">
    <h2 class="text-4xl font-light text-slate-900 dark:text-slate-100 mb-6">
      {t("techStack.title")}
    </h2>
    <p class="text-slate-500 dark:text-slate-400 text-xl font-light">
      {t("techStack.subtitle")}
    </p>
  </div>

  <!-- Minimal tech display -->
  <div class="relative flex items-center justify-center min-h-[400px]">
    <div class="text-center">
      <!-- Main tech display -->
      <div id="tech-display" class="mb-12">
        <div
          class="text-7xl md:text-8xl font-thin text-transparent bg-clip-text bg-gradient-to-r from-slate-600 via-slate-500 to-slate-400 dark:from-slate-300 dark:via-slate-200 dark:to-slate-100 transition-all duration-1500 ease-in-out"
        >
          <span id="tech-text">React</span>
        </div>
      </div>

      <!-- Category indicator -->
      <div class="text-lg font-light text-slate-400 dark:text-slate-500 uppercase tracking-widest">
        <span id="tech-category">Frontend</span>
      </div>
    </div>
  </div>

  <!-- Minimal progress indicator -->
  <div class="flex justify-center">
    <div class="flex space-x-3">
      <div id="progress-dots" class="flex space-x-3">
        <!-- Progress dots will be generated dynamically -->
      </div>
    </div>
  </div>
</div>

<script>
  // Tech stack data with categories
  const techItems = [
    { name: "React", category: "Frontend", gradient: "from-slate-600 via-slate-500 to-slate-400" },
    { name: "Next.js", category: "Frontend", gradient: "from-gray-700 via-gray-600 to-gray-500" },
    { name: "TypeScript", category: "Frontend", gradient: "from-blue-600 via-blue-500 to-blue-400" },
    { name: "Tailwind", category: "Frontend", gradient: "from-cyan-600 via-cyan-500 to-cyan-400" },
    { name: "Node.js", category: "Backend", gradient: "from-green-600 via-green-500 to-green-400" },
    { name: "Express", category: "Backend", gradient: "from-gray-600 via-gray-500 to-gray-400" },
    { name: "MongoDB", category: "Backend", gradient: "from-green-600 via-emerald-500 to-teal-500" },
    { name: "PostgreSQL", category: "Backend", gradient: "from-blue-700 via-blue-600 to-indigo-500" },
    { name: "Docker", category: "DevOps", gradient: "from-blue-600 via-blue-500 to-cyan-400" },
    { name: "AWS", category: "DevOps", gradient: "from-orange-500 via-orange-400 to-yellow-500" },
    { name: "Git", category: "DevOps", gradient: "from-orange-600 via-red-500 to-pink-500" },
    { name: "Vercel", category: "DevOps", gradient: "from-gray-700 via-gray-600 to-gray-500" },
  ];

  let currentIndex = 0;
  let isTyping = false;

  function createProgressDots() {
    const container = document.getElementById("progress-dots");
    if (!container) return;

    container.innerHTML = "";
    techItems.forEach((_, index) => {
      const dot = document.createElement("div");
      dot.className = `w-1 h-1 rounded-full transition-all duration-500 ${
        index === currentIndex ? "bg-slate-500 dark:bg-slate-400 scale-150" : "bg-slate-300 dark:bg-slate-600"
      }`;
      container.appendChild(dot);
    });
  }

  function updateProgressDots() {
    const dots = document.querySelectorAll("#progress-dots > div");
    dots.forEach((dot, index) => {
      if (index === currentIndex) {
        dot.className = "w-1 h-1 rounded-full transition-all duration-500 bg-slate-500 dark:bg-slate-400 scale-150";
      } else {
        dot.className = "w-1 h-1 rounded-full transition-all duration-500 bg-slate-300 dark:bg-slate-600";
      }
    });
  }

  function fadeText(text: string, element: HTMLElement, callback?: () => void) {
    if (isTyping) return;
    isTyping = true;

    // Fade out
    element.style.opacity = "0";

    setTimeout(() => {
      element.textContent = text;
      element.style.opacity = "1";
      isTyping = false;
      if (callback) callback();
    }, 300);
  }

  function animateTechItem() {
    const techText = document.getElementById("tech-text");
    const techCategory = document.getElementById("tech-category");
    const techDisplay = document.getElementById("tech-display");

    if (!techText || !techCategory || !techDisplay) return;

    const currentItem = techItems[currentIndex];

    // Update gradient
    techDisplay.className = `text-7xl md:text-8xl font-thin text-transparent bg-clip-text bg-gradient-to-r ${currentItem.gradient} transition-all duration-1500 ease-in-out`;

    // Update category
    techCategory.textContent = currentItem.category;

    // Fade to new text
    fadeText(currentItem.name, techText, () => {
      // Wait before next item
      setTimeout(() => {
        currentIndex = (currentIndex + 1) % techItems.length;
        updateProgressDots();
        animateTechItem();
      }, 3000);
    });
  }

  function initTechAnimation() {
    createProgressDots();
    animateTechItem();
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initTechAnimation);
  } else {
    initTechAnimation();
  }
</script>

<style>
  /* Minimal transitions */
  #tech-display {
    transition: all 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Progress dots animation */
  #progress-dots > div {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Smooth opacity transitions */
  #tech-text {
    transition: opacity 0.3s ease-in-out;
  }
</style>
