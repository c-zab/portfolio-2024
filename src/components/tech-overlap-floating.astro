---
import { getTranslation, getLocaleFromPath } from "../utils/i18n";

const locale = getLocaleFromPath(Astro.url.pathname);
const t = (key: string) => getTranslation(locale, key);
---

<div class="relative w-full h-full min-h-screen overflow-hidden bg-white dark:bg-slate-900">
  <!-- Tech elements container -->
  <div id="tech-container" class="absolute inset-0 w-full h-full">
    <!-- Tech elements will be dynamically created here -->
  </div>
</div>

<script>
  import anime from "animejs";

  // Tech stack data
  const techItems = [
    "React",
    "Vue",
    "Next.js",
    "TypeScript",
    "Node.js",
    "Express",
    "MongoDB",
    "PostgreSQL",
    "Docker",
    "AWS",
    "Git",
    "Vercel",
    "Tailwind",
    "JavaScript",
    "Python",
    "GraphQL",
    "Redis",
    "Kubernetes",
  ];

  let elements: HTMLElement[] = [];
  let animationTimeline: any;

  function createTechElement(text: string): HTMLElement {
    const element = document.createElement("div");
    element.textContent = text;
    element.className =
      "tech-element absolute text-5xl md:text-7xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-slate-300 via-slate-200 to-slate-100 dark:from-slate-400 dark:via-slate-300 dark:to-slate-200 cursor-pointer select-none";
    element.style.opacity = "0";
    element.style.transform = "scale(0.3) rotate(0deg)";

    // Random initial position
    const x = Math.random() * (window.innerWidth - 300);
    const y = Math.random() * (window.innerHeight - 150);
    element.style.left = `${x}px`;
    element.style.top = `${y}px`;

    // Random rotation
    const rotation = (Math.random() - 0.5) * 45;
    element.style.transform = `scale(0.3) rotate(${rotation}deg)`;

    // Add hover effect
    element.addEventListener("mouseenter", () => {
      anime({
        targets: element,
        scale: 1.3,
        duration: 400,
        easing: "easeOutElastic(1, .6)",
      });
    });

    element.addEventListener("mouseleave", () => {
      anime({
        targets: element,
        scale: 1,
        duration: 400,
        easing: "easeOutElastic(1, .6)",
      });
    });

    return element;
  }

  function initializeElements() {
    const container = document.getElementById("tech-container");
    if (!container) return;

    // Clear existing elements
    container.innerHTML = "";
    elements = [];

    // Create elements
    techItems.forEach((tech) => {
      const element = createTechElement(tech);
      container.appendChild(element);
      elements.push(element);
    });
  }

  function animateElements() {
    if (!elements.length) return;

    // Reset all elements
    elements.forEach((el) => {
      el.style.opacity = "0";
      el.style.transform = "scale(0.3) rotate(0deg)";
    });

    // Create continuous floating animation
    const timeline = anime.timeline({
      loop: true,
      duration: 8000,
      easing: "easeInOutQuad",
    });

    // Animate elements in with staggered delay
    timeline.add({
      targets: elements,
      opacity: [0, 0.7],
      scale: [0.3, 1],
      rotate: (el) => {
        const currentRotation = parseFloat(el.style.transform.match(/rotate\(([^)]+)\)/)?.[1] || "0");
        return [currentRotation, currentRotation + (Math.random() - 0.5) * 30];
      },
      duration: 1500,
      delay: anime.stagger(300),
      easing: "easeOutElastic(1, .6)",
    });

    // Continuous floating movement
    timeline.add({
      targets: elements,
      translateX: (el) => (Math.random() - 0.5) * 100,
      translateY: (el) => (Math.random() - 0.5) * 100,
      rotate: (el) => (Math.random() - 0.5) * 20,
      duration: 4000,
      easing: "easeInOutSine",
    });

    // Fade out
    timeline.add({
      targets: elements,
      opacity: [0.7, 0],
      scale: [1, 0.2],
      duration: 1000,
      delay: anime.stagger(100, { from: "last" }),
      easing: "easeInBack",
    });

    // Reposition elements randomly
    timeline.add({
      targets: elements,
      duration: 0,
      complete: () => {
        elements.forEach((el) => {
          el.style.left = `${Math.random() * (window.innerWidth - 300)}px`;
          el.style.top = `${Math.random() * (window.innerHeight - 150)}px`;
          el.style.transform = `scale(0.3) rotate(${(Math.random() - 0.5) * 45}deg)`;
        });
      },
    });
  }

  function startAnimation() {
    initializeElements();
    animateElements();
  }

  // Handle window resize
  window.addEventListener("resize", () => {
    if (animationTimeline) {
      animationTimeline.pause();
    }
    startAnimation();
  });

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", startAnimation);
  } else {
    startAnimation();
  }
</script>

<style>
  .tech-element {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform, opacity;
  }

  .tech-element:hover {
    z-index: 10;
  }

  /* Subtle glow effect */
  .tech-element::before {
    content: "";
    position: absolute;
    top: -3px;
    left: -3px;
    right: -3px;
    bottom: -3px;
    background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0.15), transparent);
    border-radius: 12px;
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: -1;
  }

  .tech-element:hover::before {
    opacity: 1;
  }

  /* Smooth scrolling */
  html {
    scroll-behavior: smooth;
  }

  /* Prevent text selection during animation */
  .tech-element {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
</style>
